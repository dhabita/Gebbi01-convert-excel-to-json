<!--  This site was created in Webflow. http://www.webflow.com  -->
<!--  Last Published: Fri Jun 03 2022 17:15:33 GMT+0000 (Coordinated Universal Time)  -->
<!-- <html data-wf-page="629a3f485cc6c7d4fbbfb66a" data-wf-site="629a3f475cc6c7e5f9bfb63e"> -->


<style>
    body {
        background-color: black;
    }
</style>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
<link href="/css/bisris-supercool-site.webflow.css" rel="stylesheet" type="text/css">
<script src="https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js"></script>
<!-- Bootstrap CSS -->
<%- include ('header.ejs') %>
    <!-- <link href="/css/normalize.css" rel="stylesheet" type="text/css"> -->
    <!-- <link href="/css/webflow.css" rel="stylesheet" type="text/css"> -->



    <div class="section top wf-section">
        <div class="container-default w-container">
            <!-- <div data-w-id="56cc927e-2b23-2745-c3e7-ffab1fde9176" style="-webkit-transform:translate3d(0, 0, 0) scale3d(0.97, 0.97, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0, 0, 0) scale3d(0.97, 0.97, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0, 0, 0) scale3d(0.97, 0.97, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0, 0, 0) scale3d(0.97, 0.97, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);opacity:0" -->
            <!-- class="inner-container-550px center-content mg-bottom-48px"> -->
            <div class="text-center mb-5" style="max-width:500px;margin:20px auto">
                <h1>Farm Liquidity</h1>
                <p>Reward Available <br><span id='av' class="h3 text-success">0</span> NOBLE</p>

                <p class="d-none d-md-block">Farming Smart Contract :
                    <a href='https://bscscan.com/address/0xe4193a5c81B6d3e4c8B816584A0D44576aaCda30'>0xe4193a5c81B6d3e4c8B816584A0D44576aaCda30</a> </p>
                <p class="d-block d-md-none">Farming Smart Contract :
                    <a href='https://bscscan.com/address/0xe4193a5c81B6d3e4c8B816584A0D44576aaCda30'>0xA8A5...bcEE997</a>
                </p>
            </div>
            <!-- </div> -->


            <div data-w-id="28633470-4815-78a5-90ba-0a38de375245" style="transform: translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotateX(0deg) rotateY(0deg) rotateZ(0deg) skew(0deg, 0deg); opacity: 1; transform-style: preserve-3d;" class="w-dyn-list">
                <div role="list" class="grid-3-column w-dyn-items">

                    <% for(var a=0;a < 5; a++) { let day = ["No Lock ","Farm 30 Days","Farm 90 Days","Farm 180 Days","Farm 360 Days","NOBLE-BTCB Free"]; %>
                        <% let day2 = ["Free Farm NOBLE-BNB ","NOBLE-BNB 30 Days Vesting","NOBLE-BNB  90 Days Vesting","NOBLE-BNB  180 Days Vesting","NOBLE-BNB  360 Days Vesting","Free farm NOBLE-BTCB"]; %>
                            <% let appr = "";  if(a==5) appr= "5" %>

                                <div role="listitem" class="w-dyn-item">
                                    <div href="#" class="card integration-card w-inline-block">
                                        <div class="badge absolute-top-right d-none">New</div>
                                        <div class="flex align-center"><img src="https://nobletoken.io/assets/img/noble.png" alt="NOBLE-BNB" style="max-width: 50px;" class="mg-right-16px">
                                            <div>
                                                <div class="h3-size color-white">
                                                    <%= day[a] %>
                                                </div>
                                                <div>
                                                    <%= day2[a] %>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="divider spacer"></div>
                                        <div class="row text-center" style='font-size:15px'>
                                            <div class="col-12 text-secondary text-center">APR <span class="h1 text-success font-weight-bold" id="apr-<%= a %>">0</span> %</div>
                                            <div class=" mt-2   col-6  "> Locked LP <br> <b class="text-success" id="totallp-<%= a %>">0.00000000</b> <small> <br> ($<span id="lp-<%= a %>">0</span>)  </small></div>
                                            <div class=" mt-2   col-6  "> Your LP <br> <b class="text-success" id="userlp-<%= a %>">0.00000000</b> <small> <br> ($<span id="lpu-<%= a %>">0.00</span>)  </small></div>
                                            <div class=" mt-2   col-6  "> Reward NOBLE <br> <b class="text-success" id="userreward-<%= a %>">0.00000000</b> <small>  <br>($<span id="reward-<%= a %>">0.00</span>)  </small></div>
                                            <div class=" mt-2   col-6  "> Withdrawable LP <br> <b class="text-success" id="wdlp-<%= a %>">0.00000000</b> <small> <br> ($<span id="lpa-<%= a %>">0.00</span>)  </small></div>

                                            <div class="col-12 mt-3  ">

                                                <div class="row mt-1 border p-2 inputam-<%= a %> p-2 m-2 justify-content-center" style="display:none">
                                                    <p>Your LP at wallet : <b class="walletlp<%= a %>">0.00</b></p>
                                                    <input id='amdp-<%= a %>' class="col-12 text-center p-1" placeholder="LP Amount"> </input>
                                                    <button type="button" class="btn btn-sm mt-2 btn-primary" onclick="DepositF(<%= a %>,$('#amdp-<%= a %>').val())">Deposit LP</button>

                                                </div>



                                            </div>
                                            <div class="col-12 mt-2 d-flex justify-content-around">
                                                <button class='btn appr3<%= appr %>  btn-outline-primary btn-sm ' onclick="reqappr3(1,<%= appr %>)">
                                            APPROVE
                                            </button>
                                                <button class='btn dplp3<%= appr %> btn-outline-info btn-sm ' style="display:none" onclick='$(".inputam-<%= a %>").toggle();'>
                                            DEPOSIT
                                            </button>
                                                <button class='btn  btn-outline-warning btn-sm ' onclick="Withdraw(<%= a %>)">
                                                WITHDRAW
                                                </button>
                                                <button class='btn  btn-outline-success btn-sm ' onclick="DepositF(<%= a %>,0)">
                                                REWARD
                                                </button>
                                            </div>

                                            <div class="col-12 text-center mt-3"><a href='https://pancakeswap.finance/liquidity'> Create LP </a></div>
                                        </div>
                                        <div class="link-primary">
                                            <div class="underline-wrap">
                                                <div class="underline-fill" style="height: 2px; width: 0%;"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <%  } %>

                </div>
            </div>
        </div>
    </div>
    <%- include ('footer.ejs') %>
        </div>
        <script src="https://d3e54v103j8qbb.cloudfront.net/js/jquery-3.5.1.min.dc5e7f18c8.js?site=629a3f475cc6c7e5f9bfb63e" type="text/javascript" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
        <script src="js/webflow.js" type="text/javascript"></script>
        <!-- [if lte IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/placeholders/3.0.2/placeholders.min.js"></script><![endif] -->
        </body>

        </html>



        <script>
            var serverbnb = "https://bsc-dataseed1.defibit.io/";
            const web3 = new Web3(new Web3.providers.HttpProvider(serverbnb));
            let CONTRACT = "0xe4193a5c81B6d3e4c8B816584A0D44576aaCda30";
            let NOBLE = "0x52a05B8801F314e9AaEb53a905ff0F4762Cb0081";
            let LP = "0x4fDA2da2bbF4Cea013953ae7c5942776627d9696";
            let BTCLP = "0x97eB51c1484b0cb88f7E6fb23532302eA6B049EE";
            let RATEBNB = 0;
            let RATENOBLE = 0;
            let SUPPLYLP = 0;
            let ONLP = 0;
            let RATELP = 0;
            let RATELPBTC = 0;

            let abilp = [{
                "inputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "constructor"
            }, {
                "anonymous": false,
                "inputs": [{
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                }, {
                    "indexed": true,
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                }, {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }],
                "name": "Approval",
                "type": "event"
            }, {
                "anonymous": false,
                "inputs": [{
                    "indexed": true,
                    "internalType": "address",
                    "name": "sender",
                    "type": "address"
                }, {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount0",
                    "type": "uint256"
                }, {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount1",
                    "type": "uint256"
                }, {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                }],
                "name": "Burn",
                "type": "event"
            }, {
                "anonymous": false,
                "inputs": [{
                    "indexed": true,
                    "internalType": "address",
                    "name": "sender",
                    "type": "address"
                }, {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount0",
                    "type": "uint256"
                }, {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount1",
                    "type": "uint256"
                }],
                "name": "Mint",
                "type": "event"
            }, {
                "anonymous": false,
                "inputs": [{
                    "indexed": true,
                    "internalType": "address",
                    "name": "sender",
                    "type": "address"
                }, {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount0In",
                    "type": "uint256"
                }, {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount1In",
                    "type": "uint256"
                }, {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount0Out",
                    "type": "uint256"
                }, {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount1Out",
                    "type": "uint256"
                }, {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                }],
                "name": "Swap",
                "type": "event"
            }, {
                "anonymous": false,
                "inputs": [{
                    "indexed": false,
                    "internalType": "uint112",
                    "name": "reserve0",
                    "type": "uint112"
                }, {
                    "indexed": false,
                    "internalType": "uint112",
                    "name": "reserve1",
                    "type": "uint112"
                }],
                "name": "Sync",
                "type": "event"
            }, {
                "anonymous": false,
                "inputs": [{
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                }, {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                }, {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }],
                "name": "Transfer",
                "type": "event"
            }, {
                "constant": true,
                "inputs": [],
                "name": "DOMAIN_SEPARATOR",
                "outputs": [{
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }, {
                "constant": true,
                "inputs": [],
                "name": "MINIMUM_LIQUIDITY",
                "outputs": [{
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }, {
                "constant": true,
                "inputs": [],
                "name": "PERMIT_TYPEHASH",
                "outputs": [{
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }, {
                "constant": true,
                "inputs": [{
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }, {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }],
                "name": "allowance",
                "outputs": [{
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }, {
                "constant": false,
                "inputs": [{
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                }, {
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }],
                "name": "approve",
                "outputs": [{
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "constant": true,
                "inputs": [{
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }],
                "name": "balanceOf",
                "outputs": [{
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }, {
                "constant": false,
                "inputs": [{
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                }],
                "name": "burn",
                "outputs": [{
                    "internalType": "uint256",
                    "name": "amount0",
                    "type": "uint256"
                }, {
                    "internalType": "uint256",
                    "name": "amount1",
                    "type": "uint256"
                }],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "constant": true,
                "inputs": [],
                "name": "decimals",
                "outputs": [{
                    "internalType": "uint8",
                    "name": "",
                    "type": "uint8"
                }],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }, {
                "constant": true,
                "inputs": [],
                "name": "factory",
                "outputs": [{
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }, {
                "constant": true,
                "inputs": [],
                "name": "getReserves",
                "outputs": [{
                    "internalType": "uint112",
                    "name": "_reserve0",
                    "type": "uint112"
                }, {
                    "internalType": "uint112",
                    "name": "_reserve1",
                    "type": "uint112"
                }, {
                    "internalType": "uint32",
                    "name": "_blockTimestampLast",
                    "type": "uint32"
                }],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }, {
                "constant": false,
                "inputs": [{
                    "internalType": "address",
                    "name": "_token0",
                    "type": "address"
                }, {
                    "internalType": "address",
                    "name": "_token1",
                    "type": "address"
                }],
                "name": "initialize",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "constant": true,
                "inputs": [],
                "name": "kLast",
                "outputs": [{
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }, {
                "constant": false,
                "inputs": [{
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                }],
                "name": "mint",
                "outputs": [{
                    "internalType": "uint256",
                    "name": "liquidity",
                    "type": "uint256"
                }],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "constant": true,
                "inputs": [],
                "name": "name",
                "outputs": [{
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }, {
                "constant": true,
                "inputs": [{
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }],
                "name": "nonces",
                "outputs": [{
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }, {
                "constant": false,
                "inputs": [{
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                }, {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                }, {
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }, {
                    "internalType": "uint256",
                    "name": "deadline",
                    "type": "uint256"
                }, {
                    "internalType": "uint8",
                    "name": "v",
                    "type": "uint8"
                }, {
                    "internalType": "bytes32",
                    "name": "r",
                    "type": "bytes32"
                }, {
                    "internalType": "bytes32",
                    "name": "s",
                    "type": "bytes32"
                }],
                "name": "permit",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "constant": true,
                "inputs": [],
                "name": "price0CumulativeLast",
                "outputs": [{
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }, {
                "constant": true,
                "inputs": [],
                "name": "price1CumulativeLast",
                "outputs": [{
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }, {
                "constant": false,
                "inputs": [{
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                }],
                "name": "skim",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "constant": false,
                "inputs": [{
                    "internalType": "uint256",
                    "name": "amount0Out",
                    "type": "uint256"
                }, {
                    "internalType": "uint256",
                    "name": "amount1Out",
                    "type": "uint256"
                }, {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                }, {
                    "internalType": "bytes",
                    "name": "data",
                    "type": "bytes"
                }],
                "name": "swap",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "constant": true,
                "inputs": [],
                "name": "symbol",
                "outputs": [{
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }, {
                "constant": false,
                "inputs": [],
                "name": "sync",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "constant": true,
                "inputs": [],
                "name": "token0",
                "outputs": [{
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }, {
                "constant": true,
                "inputs": [],
                "name": "token1",
                "outputs": [{
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }, {
                "constant": true,
                "inputs": [],
                "name": "totalSupply",
                "outputs": [{
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }, {
                "constant": false,
                "inputs": [{
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                }, {
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }],
                "name": "transfer",
                "outputs": [{
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "constant": false,
                "inputs": [{
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                }, {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                }, {
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }],
                "name": "transferFrom",
                "outputs": [{
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            }];
            var abi = [{
                "inputs": [],
                "stateMutability": "nonpayable",
                "type": "constructor"
            }, {
                "anonymous": false,
                "inputs": [{
                    "indexed": true,
                    "internalType": "address",
                    "name": "previousOwner",
                    "type": "address"
                }, {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }],
                "name": "OwnershipTransferred",
                "type": "event"
            }, {
                "inputs": [{
                    "internalType": "uint256",
                    "name": "_pid",
                    "type": "uint256"
                }, {
                    "internalType": "address",
                    "name": "_user",
                    "type": "address"
                }],
                "name": "balanceAvailable",
                "outputs": [{
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }],
                "stateMutability": "view",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "uint256",
                    "name": "_pid",
                    "type": "uint256"
                }, {
                    "internalType": "address",
                    "name": "_user",
                    "type": "address"
                }],
                "name": "balanceLP",
                "outputs": [{
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }],
                "stateMutability": "view",
                "type": "function"
            }, {
                "inputs": [],
                "name": "clearBNB",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "address",
                    "name": "token_staking",
                    "type": "address"
                }, {
                    "internalType": "uint256",
                    "name": "_pembagi",
                    "type": "uint256"
                }, {
                    "internalType": "uint256",
                    "name": "_daylock",
                    "type": "uint256"
                }],
                "name": "create",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "uint256",
                    "name": "_pid",
                    "type": "uint256"
                }, {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                }],
                "name": "deposit",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "inputs": [],
                "name": "owner",
                "outputs": [{
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }],
                "stateMutability": "view",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "uint256",
                    "name": "_pid",
                    "type": "uint256"
                }, {
                    "internalType": "address",
                    "name": "_user",
                    "type": "address"
                }],
                "name": "pendingReward",
                "outputs": [{
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }],
                "stateMutability": "view",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }],
                "name": "poolInfo",
                "outputs": [{
                    "internalType": "address",
                    "name": "tokenStaking",
                    "type": "address"
                }, {
                    "internalType": "uint256",
                    "name": "accPerShare",
                    "type": "uint256"
                }, {
                    "internalType": "uint256",
                    "name": "totalLP",
                    "type": "uint256"
                }, {
                    "internalType": "uint256",
                    "name": "rewardPerBlock",
                    "type": "uint256"
                }, {
                    "internalType": "uint256",
                    "name": "lastRewardBlock",
                    "type": "uint256"
                }, {
                    "internalType": "uint256",
                    "name": "lock_deposit_block",
                    "type": "uint256"
                }, {
                    "internalType": "uint256",
                    "name": "pembagi",
                    "type": "uint256"
                }, {
                    "internalType": "uint256",
                    "name": "daylock",
                    "type": "uint256"
                }],
                "stateMutability": "view",
                "type": "function"
            }, {
                "inputs": [],
                "name": "renounceOwnership",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "uint256",
                    "name": "_pid",
                    "type": "uint256"
                }, {
                    "internalType": "address",
                    "name": "_user",
                    "type": "address"
                }],
                "name": "timelock",
                "outputs": [{
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }],
                "stateMutability": "view",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }],
                "name": "transferOwnership",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "uint256",
                    "name": "_pid",
                    "type": "uint256"
                }, {
                    "internalType": "uint256",
                    "name": "_pembagi",
                    "type": "uint256"
                }],
                "name": "updatePembagi",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "uint256",
                    "name": "_pid",
                    "type": "uint256"
                }],
                "name": "updatePool",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }, {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }],
                "name": "userInfo",
                "outputs": [{
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }, {
                    "internalType": "uint256",
                    "name": "rewardDebt",
                    "type": "uint256"
                }, {
                    "internalType": "uint256",
                    "name": "release_block",
                    "type": "uint256"
                }, {
                    "internalType": "uint256",
                    "name": "deposit_time",
                    "type": "uint256"
                }],
                "stateMutability": "view",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "uint256",
                    "name": "_pid",
                    "type": "uint256"
                }],
                "name": "withdraw",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }];
            let ABIERC20 = [{
                "inputs": [],
                "stateMutability": "nonpayable",
                "type": "constructor"
            }, {
                "anonymous": false,
                "inputs": [{
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                }, {
                    "indexed": true,
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                }, {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }],
                "name": "Approval",
                "type": "event"
            }, {
                "anonymous": false,
                "inputs": [{
                    "indexed": true,
                    "internalType": "address",
                    "name": "previousOwner",
                    "type": "address"
                }, {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }],
                "name": "OwnershipTransferred",
                "type": "event"
            }, {
                "anonymous": false,
                "inputs": [{
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                }, {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                }, {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }],
                "name": "Transfer",
                "type": "event"
            }, {
                "inputs": [],
                "name": "MaxTaxPerM",
                "outputs": [{
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }],
                "stateMutability": "view",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "uint256",
                    "name": "taxFee",
                    "type": "uint256"
                }],
                "name": "SetTaxPerM",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "inputs": [],
                "name": "TaxPerM",
                "outputs": [{
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }],
                "stateMutability": "view",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                }, {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                }],
                "name": "allowance",
                "outputs": [{
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }],
                "stateMutability": "view",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                }, {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }],
                "name": "approve",
                "outputs": [{
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }],
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }],
                "name": "balanceOf",
                "outputs": [{
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }],
                "stateMutability": "view",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                }],
                "name": "clear",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "inputs": [],
                "name": "clearBNB",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "inputs": [],
                "name": "decimals",
                "outputs": [{
                    "internalType": "uint8",
                    "name": "",
                    "type": "uint8"
                }],
                "stateMutability": "view",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                }, {
                    "internalType": "uint256",
                    "name": "subtractedValue",
                    "type": "uint256"
                }],
                "name": "decreaseAllowance",
                "outputs": [{
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }],
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "inputs": [],
                "name": "devAddress",
                "outputs": [{
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }],
                "stateMutability": "view",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                }, {
                    "internalType": "uint256",
                    "name": "addedValue",
                    "type": "uint256"
                }],
                "name": "increaseAllowance",
                "outputs": [{
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }],
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "inputs": [],
                "name": "name",
                "outputs": [{
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }],
                "stateMutability": "view",
                "type": "function"
            }, {
                "inputs": [],
                "name": "owner",
                "outputs": [{
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }],
                "stateMutability": "view",
                "type": "function"
            }, {
                "inputs": [],
                "name": "renounceOwnership",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "address",
                    "name": "addr",
                    "type": "address"
                }],
                "name": "setDevAddress",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "inputs": [],
                "name": "symbol",
                "outputs": [{
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }],
                "stateMutability": "view",
                "type": "function"
            }, {
                "inputs": [],
                "name": "totalSupply",
                "outputs": [{
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }],
                "stateMutability": "view",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "address",
                    "name": "recipient",
                    "type": "address"
                }, {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }],
                "name": "transfer",
                "outputs": [{
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }],
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "address",
                    "name": "sender",
                    "type": "address"
                }, {
                    "internalType": "address",
                    "name": "recipient",
                    "type": "address"
                }, {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }],
                "name": "transferFrom",
                "outputs": [{
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }],
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "inputs": [{
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }],
                "name": "transferOwnership",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }, {
                "stateMutability": "payable",
                "type": "receive"
            }];


            async function getratebnb() {
                // const web3 = new Web3(ethereum);

                let aaa = "0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16";
                var contract = new web3.eth.Contract(abilp, aaa);
                try {
                    await contract.methods.getReserves().call().then(function(resp) {

                        //console.log(resp);


                        RATEBNB = ((resp[1] / (10 ** 18)) / (resp[0] / (10 ** 18))) * 1;
                        //console.log(RATEBNB, "RATE BNB");

                    });
                } catch (error) {
                    //console.log(error)
                }


            }

            setInterval(getratebnb, 10000);

            // async function getrateNOBLE() {
            //     // const web3 = new Web3(ethereum);

            //     let cbnbusdt = LP;
            //     var contract = new web3.eth.Contract(abilp, cbnbusdt);
            //     try {
            //         await contract.methods.getReserves().call().then(function(resp) {

            //             RATENOBLE = ((resp[1] / (10 ** 18)) / (resp[0] / (10 ** 18))) * 1;
            //             RATENOBLE *= RATEBNB;

            //             //console.log(RATEBNB, "RATE NOBLE");

            //         });
            //     } catch (error) {
            //         //console.log(error)
            //     }

            //     //console.log(RATENOBLE);
            // }

            // setInterval(getrateNOBLE, 10000);

            // async function gettotallp() {
            //     // const web3 = new Web3(ethereum);

            //     let cbnbusdt = LP;
            //     var contract = new web3.eth.Contract(ABIERC20, cbnbusdt);
            //     try {
            //         await contract.methods.totalSupply().call().then(function(resp) {

            //             SUPPLYLP = resp;

            //         });
            //     } catch (error) {
            //         //console.log(error)
            //     }

            //     //console.log(SUPPLYLP);
            // }

            // setInterval(gettotallp, 10000);


            // async function onlp() {
            //     // const web3 = new Web3(ethereum);

            //     let cbnbusdt = LP;
            //     var contract = new web3.eth.Contract(ABIERC20, NOBLE);
            //     try {
            //         await contract.methods.balanceOf(LP).call().then(function(resp) {

            //             ONLP = resp;
            //             RATELP = ONLP / SUPPLYLP * RATENOBLE;
            //             //console.log(RATELP, "RATE RATELP");

            //         });
            //     } catch (error) {
            //         //console.log(error)
            //     }

            //     //console.log(RATELP);
            // }

            // setInterval(onlp, 10000);
        </script>


        <script>
            // getrateNOBLE();
            // getratebnb();







            async function wd() {


                const web3 = new Web3(ethereum);




                const accounts = await ethereum.request({
                    method: 'eth_requestAccounts'
                });
                var fr = accounts[0];
                var co = new web3.eth.Contract(abi, CONTRACT);

                var tx = {
                    from: fr,
                    to: CONTRACT,
                    data: co.methods.unvesting().encodeABI()

                };
                web3.eth.sendTransaction(tx).then(res => {

                }).catch(err => {
                    //console.log("err", err)
                });

            }




            {
                async function abb() {

                    const web3 = new Web3(ethereum);

                    const accounts = await ethereum.request({
                        method: 'eth_requestAccounts'
                    });
                    var fr = accounts[0];

                    try {

                        var contract = new web3.eth.Contract(ABIERC20, NOBLE);

                        await contract.methods.balanceOf(fr).call().then(function(resp) {

                            $("#userwalletNOBLE").html((resp / (10 ** 18)).toFixed(8));
                            $("#userwalletNOBLEr").html((resp / (10 ** 18) * RATENOBLE).toFixed(2));

                        });
                    } catch (error) {

                    }
                }

                abb();
                setInterval(abb, 10000);

            }

            {
                async function acc() {

                    const web3 = new Web3(ethereum);

                    const accounts = await ethereum.request({
                        method: 'eth_requestAccounts'
                    });
                    var fr = accounts[0];

                    try {

                        var contract = new web3.eth.Contract(ABIERC20, LP);

                        await contract.methods.balanceOf(fr).call().then(function(resp) {
                            //console.log(resp, " LP");

                            $(".walletlp0").html((resp / (10 ** 18)).toFixed(8));
                            $(".walletlp1").html((resp / (10 ** 18)).toFixed(8));
                            $(".walletlp2").html((resp / (10 ** 18)).toFixed(8));
                            $(".walletlp3").html((resp / (10 ** 18)).toFixed(8));
                            $(".walletlp4").html((resp / (10 ** 18)).toFixed(8));

                            // $("#userwalletlpr").html((resp / (10 ** 18) * RATELP * 2).toFixed(2));

                        });
                    } catch (error) {
                        //console.log(error)

                    }
                }

                acc();
                setInterval(acc, 10000);

            }


            {
                async function accb() {

                    const web3 = new Web3(ethereum);

                    const accounts = await ethereum.request({
                        method: 'eth_requestAccounts'
                    });
                    var fr = accounts[0];

                    try {

                        var contract = new web3.eth.Contract(ABIERC20, BTCLP);

                        await contract.methods.balanceOf(fr).call().then(function(resp) {
                            //console.log(resp, " LP");

                            $(".walletlp5").html((resp / (10 ** 18)).toFixed(8));


                            // $("#userwalletlpr").html((resp / (10 ** 18) * RATELP * 2).toFixed(2));

                        });
                    } catch (error) {
                        //console.log(error)

                    }
                }

                accb();
                setInterval(accb, 10000);

            }


            {
                async function add() {

                    const web3 = new Web3(ethereum);

                    const accounts = await ethereum.request({
                        method: 'eth_requestAccounts'
                    });
                    var fr = accounts[0];

                    try {

                        var contract = new web3.eth.Contract(abi, CONTRACT);

                        await contract.methods.balanceLP(0, fr).call().then(function(resp) {

                            $("#userlp").html((resp / (10 ** 18)).toFixed(8));
                            $("#userlpr").html((resp / (10 ** 18) * RATELP * 2).toFixed(2));

                        });
                    } catch (error) {

                    }
                }

                add();
                setInterval(add, 10000);

            }




            {
                async function axx() {

                    const web3 = new Web3(ethereum);

                    const accounts = await ethereum.request({
                        method: 'eth_requestAccounts'
                    });
                    var fr = accounts[0];

                    try {

                        var contract = new web3.eth.Contract(abi, CONTRACT);

                        await contract.methods.pendingReward(0, fr).call().then(function(resp) {

                            $("#userreward").html((resp / (10 ** 18)).toFixed(8));
                            $("#userrewardr").html((resp / (10 ** 18) * RATENOBLE).toFixed(2));

                        });
                    } catch (error) {

                    }
                }

                axx();
                setInterval(axx, 10000);

            }
        </script>



        <script>
            async function reqappr3(app = 0, pid = "") {

                //console.log(app);

                let lp = LP;
                if (pid == "5") lp = BTCLP;


                const web3 = new Web3(ethereum);


                const accounts = await ethereum.request({
                    method: 'eth_requestAccounts'
                });
                var fr = accounts[0];
                var contract4 = new web3.eth.Contract(ABIERC20, lp);


                await contract4.methods.allowance(fr, CONTRACT).call().then(function(resp) {

                    //console.log(resp * 1);

                    if (resp > 999999999) {
                        $(".appr3" + pid).hide();
                        $(".dplp3" + pid).show();
                        return true;
                    } else {

                        if (app == 0) return;

                        // const web3 = new Web3(ethereum);
                        //const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
                        //const account = accounts[0];
                        var contract = contract4; // new web3.eth.Contract(ABIERC20, LP);
                        var amn = "115792089237316195423570985008687907853269984665640564039457584007913129639935";
                        contract.methods.approve(CONTRACT, amn).send({
                                from: fr
                            },
                            function(err, transactionHash) {
                                //console.log(transactionHash);
                                $(".appr3" + pid).hide();
                                $(".dplp3" + pid).show();
                                //HANDLE.Approve(pid, transactionHash);
                                return true;
                            });
                    }
                });


            }

            reqappr3(0);
            reqappr3(0, "5");
        </script>


        <script>
            async function DepositF(pid, am) {


                var digit = 18;
                const web3 = new Web3(ethereum);

                var abi = [{
                    "inputs": [{
                        "internalType": "uint256",
                        "name": "_pid",
                        "type": "uint256"
                    }, {
                        "internalType": "uint256",
                        "name": "_amount",
                        "type": "uint256"
                    }],
                    "name": "deposit",
                    "outputs": [],
                    "stateMutability": "nonpayable",
                    "type": "function"
                }];


                const accounts = await ethereum.request({
                    method: 'eth_requestAccounts'
                });
                var fr = accounts[0];
                var contract = new web3.eth.Contract(abi, CONTRACT);
                am = am * (10 ** digit);
                var amn = BigInt(am);
                amn += "";

                var tx = {
                    from: fr,
                    to: CONTRACT,
                    data: contract.methods.deposit(pid, amn).encodeABI()

                };
                web3.eth.sendTransaction(tx).then(res => {
                    //hideLoader();
                    //HANDLE.DepositF(pid, res);
                    //WALLET.getWalletLpBalance(pid);
                    //console.log("res",res);
                }).catch(err => {
                    //onsole.log("err",err)
                });




            }
        </script>



        <script>
            async function Withdraw(pid) {
                var co = CONTRACT;
                var digit = 18;

                const web3 = new Web3(ethereum);



                const accounts = await ethereum.request({
                    method: 'eth_requestAccounts'
                });
                var fr = accounts[0];
                var contract = new web3.eth.Contract(abi, co);
                // am = am * (10 ** digit);
                // var amn = BigInt(am);
                // amn += "";
                var tx = {
                    from: fr,
                    to: co,
                    data: contract.methods.withdraw(pid).encodeABI()

                };
                web3.eth.sendTransaction(tx).then(res => {

                }).catch(err => {
                    //console.log("err",err)
                });

            }
        </script>



        <script>
            {
                async function f1(pid) {

                    // const web3 = new Web3(ethereum);

                    const accounts = await ethereum.request({
                        method: 'eth_requestAccounts'
                    });
                    var fr = accounts[0];

                    var contract = new web3.eth.Contract(abi, CONTRACT);


                    // try {


                    //     await contract.methods.poolInfo(pid).call().then(function(resp) {


                    //         $("#totallp-" + pid).html(((resp.totalLP * 1) / (10 ** 18)).toFixed(8));
                    //         $("#lp-" + pid).html((RATELP * (resp.totalLP * 1) / (10 ** 18) * 2).toFixed(2));

                    //     });
                    // } catch (error) {

                    // }

                    try {



                        await contract.methods.balanceLP(pid, fr).call().then(function(resp) {

                            if (pid == 5) {
                                $("#userlp-" + pid).html(((resp * 1) / (10 ** 18)).toFixed(8));
                                $("#lpu-" + pid).html((RATELPBTC * (resp * 1) / (10 ** 18) * 2).toFixed(2));
                            } else {
                                $("#userlp-" + pid).html(((resp * 1) / (10 ** 18)).toFixed(8));
                                $("#lpu-" + pid).html((RATELP * (resp * 1) / (10 ** 18) * 2).toFixed(2));
                            }

                        });
                    } catch (error) {

                    }

                    try {



                        await contract.methods.balanceAvailable(pid, fr).call().then(function(resp) {

                            if (pid == 5) {
                                $("#wdlp-" + pid).html(((resp * 1) / (10 ** 18).toFixed(8)).toFixed(8));
                                $("#lpa-" + pid).html((RATELPBTC * (resp * 1) / (10 ** 18) * 2).toFixed(2));
                            } else {
                                $("#wdlp-" + pid).html(((resp * 1) / (10 ** 18).toFixed(8)).toFixed(8));
                                $("#lpa-" + pid).html((RATELP * (resp * 1) / (10 ** 18) * 2).toFixed(2));
                            }

                        });
                    } catch (error) {

                    }

                    try {



                        await contract.methods.pendingReward(pid, fr).call().then(function(resp) {


                            $("#userreward-" + pid).html(((resp * 1) / (10 ** 18)).toFixed(8));
                            $("#reward-" + pid).html((RATENOBLE * (resp * 1) / (10 ** 18)).toFixed(2));

                        });
                    } catch (error) {

                    }
                }

                function sleep(ms) {
                    return new Promise(resolve => setTimeout(resolve, ms));
                }

                async function ret() {
                    f1(0);
                    sleep(1000);
                    f1(1);
                    sleep(1000);
                    f1(2);
                    sleep(1000);
                    f1(3);
                    sleep(1000);
                    f1(4);
                    sleep(1000);
                    f1(5);
                }
                ret();
                setInterval(ret, 10000);

            }
        </script>


        <script>
            function his() {

                var data = {

                };

                //console.log(data);

                $.get("/farmapi", data)
                    .done(function(data) {
                        //console.log(data);

                        let a = 0;
                        data.pool.forEach(e => {

                            if (a == 5) {
                                $("#totallp-" + a).html(((e.totalLP * 1) / (10 ** 18)).toFixed(8));
                                $("#lp-" + a).html((data.rate.lpbtc * (e.totalLP * 1) / (10 ** 18) * 2).toFixed(2));
                                $("#apr-" + a).html((e.apr * 1).toFixed(2));
                            } else {

                                $("#totallp-" + a).html(((e.totalLP * 1) / (10 ** 18)).toFixed(8));
                                $("#lp-" + a).html((data.rate.lp * (e.totalLP * 1) / (10 ** 18) * 2).toFixed(2));
                                $("#apr-" + a).html((e.apr * 1).toFixed(2));
                            }






                            a++;
                        });

                        RATENOBLE = data.rate.noble;
                        RATELP = data.rate.lp;
                        RATELPBTC = data.rate.lpbtc;



                        $("#av").html((data.reward).toFixed(0));
                        $("#avr").html((data.reward * data.rate.noble).toFixed(2));


                    });
            }
            his();
            setInterval(his, 10000);
        </script>